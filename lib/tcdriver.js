// Generated by CoffeeScript 1.10.0
(function() {
  var EventEmitter, exec, readline, stream, tcdriver,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exec = require('child_process').exec;

  readline = require('readline');

  stream = require('stream');

  EventEmitter = require('events');

  module.exports = tcdriver = (function(superClass) {
    extend(tcdriver, superClass);

    function tcdriver(paramObj, tool) {
      var atr;
      this.projectSuite = paramObj.projectSuite;
      this.project = paramObj.project;
      this.fullmethodname = paramObj.fullmethodname;
      if (tool != null) {
        this.testtool = tool;
      } else {
        this.testtool = 'TestComplete';
      }
      atr = exec('cscript .\\Utilities\\atr.js ' + this.testtool + ' "' + this.projectSuite + '" /p:"' + this.project + '" /s:"' + this.fullmethodname + '" /exit /silentmode', (function(_this) {
        return function(error, stdoutBuffer, stderrBuffer) {
          var bufStream, rl;
          bufStream = new stream.PassThrough;
          bufStream.end(stdoutBuffer);
          rl = readline.createInterface({
            input: bufStream
          });
          rl.on('line', function(msg) {
            var e, error1, jsonObj, jsonVal;
            try {
              jsonObj = JSON.parse(msg.toString());
              jsonVal = jsonObj.TestResult;
              if (jsonObj.TestResult != null) {
                debugger;
                if (jsonObj.TestResult === 'Pass') {
                  _this.result = true;
                } else {
                  _this.result = false;
                }
                _this.emit('testResult');
              }
            } catch (error1) {
              e = error1;
            }
          });
          if (error != null) {
            console.log("exec error: " + error);
          }
        };
      })(this));
      atr.on('close', (function(_this) {
        return function(code) {};
      })(this));
      atr.on('error', (function(_this) {
        return function(err) {
          return console.log("Failed to start child process.");
        };
      })(this));
    }

    tcdriver.prototype.testresult = function(cb) {
      cb(this.result);
    };

    return tcdriver;

  })(EventEmitter);

}).call(this);
